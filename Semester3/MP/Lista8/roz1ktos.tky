#lang racket


(define (list->mlist xs)
    (cond [(null? xs) null]
          [else (mcons (car xs) (list->mlist (cdr xs)))]))

(define l (list->mlist '(1 2 3 4)))
(define p (list->mlist '(1 2 3 4 5 6 7)))

(define (mreverse! xs)
  (define (it q prev next)
    (cond [(null? next)
           (set-mcdr! q prev) q]
          [else
           (set-mcdr! q prev)
           (it next q (mcdr next))]))
  (it xs null (mcdr xs)))
                