#lang racket


(provide (struct-out column-info)
         (struct-out table))
      

(define-struct column-info (name type) #:transparent)

(define-struct table (schema rows) #:transparent)

(define cities
  (table
   (list (column-info 'city    'string)
         (column-info 'country 'string)
         (column-info 'area    'number)
         (column-info 'capital 'boolean))
   (list (list "Wrocław" "Poland"  293 #f)
         (list "Warsaw"  "Poland"  517 #t)
         (list "Poznań"  "Poland"  262 #f)
         (list "Berlin"  "Germany" 892 #t)
         (list "Munich"  "Germany" 310 #f)
         (list "Paris"   "France"  105 #t)
         (list "Rennes"  "France"   50 #f))))

(define countries
  (table
   (list (column-info 'country 'string)
         (column-info 'population 'number))
   (list (list "Poland" 38)
         (list "Germany" 83)
         (list "France" 67)
         (list "Spain" 47))))

(define (empty-table columns) (table columns '()))

; Wstawianie

;Sprawdzanie typu
(define (check-type val type)
  (cond [(equal? type 'string) (string? val)]
        [(equal? type 'number) (number? val)]
        [(equal? type 'boolean) (boolean? val)]
        [else #f]))

;funkcja sprawdzajaca czy wiersz jest odpowiedni (zgodnosc typów, #wartosci)
(define (valid-row? scheme row)
  (if (or (and (null? scheme) (not (null? row))) (and (not (null? scheme)) (null? row)))
      #f
      (if (and (null? scheme) (null? row))
          #t
          (let ([type (column-info-type (car scheme))]
                [val (car row)])
            (if (check-type val type)
                (valid-row? (cdr scheme) (cdr row))
                #f)))))

;wstawienie do tablicy        
(define (table-insert row tab)
  (let ([s (table-schema tab)])
    (if (valid-row? s row)
        (append (list row) (table-rows tab))
        (raise(error "cos poszlo nie tak")))))

(define cities2
  (table-insert (list "Kurwa"  "Duma"   50 #f ) cities))

;Projekcja

;funkcja zwracajaca pozyje kolumny w schemacie
(define (column-id col schema it)
  (if (null? schema)
      (raise (error "brak kolumny o takiej nazwie"))
      (if (equal? col (column-info-name (car schema)))
          it
          (column-id col (cdr schema) (+ it 1)))))
;
;(define (id-list cols tab)
;  (if (null? cols)
;      null
;      (cons (column-id (car cols) (table-schema tab) 0) (id-list (cdr cols) tab))))
;

;funkcja zwracjaca liste pozycji odpowiednich kolumn 
(define (list-id cols schema)
  (map  (lambda (x) (column-id x schema 0)) cols))

;funkcja zwraca info o kolumnie na id pozycji
(define (get-i-element i xs )
  (define (out ys it)
    (if (equal? it i)
        (car ys)
        (out (cdr ys) (+ it 1))))
  (out xs 0))

;funkcja zwaraca liste info kolumn dla listy pozycji
(define (get-all-elements is xs)
  (map (lambda (x) (get-i-element x xs)) is))


(define (table-project cols tab)
  (let ([is (list-id cols (table-schema tab))])
    (table (get-all-elements is (table-schema tab)) (map (lambda (x) (list(get-all-elements is x))) (table-rows tab)))))

